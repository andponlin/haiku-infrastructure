apiVersion: apps/v1
kind: Deployment
metadata:
  name: git
  labels:
    app: git
spec:
  replicas: 1
  selector:
    matchLabels:
      app: git
  strategy:
    # RollingUpgrade can't be used because of RWO storage and gerrit lock files
    type: Recreate
  template:
    metadata:
      labels:
        app: git
    spec:
      containers:
      - name: gerrit
        image: ghcr.io/haiku/gerrit:3.11.2-1
        volumeMounts:
        - name: gerrit-data
          mountPath: /var/gerrit/review_site
        - name: irccat-password
          mountPath: /run/secrets/irccat
        env:
          - name: AUTH_TYPE
            value: "OAUTH"
          - name: GITWEB_TYPE
            value: cgit
          - name: JAVA_HEAPLIMIT
            value: "1024m"
          - name: SMTP_SERVER
            value: "smtp"
          - name: SMTP_SERVER_PORT
            value: "25"
          - name: SMTP_FROM
            value: "Gerrit <review@review.haiku-os.org>"
          - name: SMTP_CONNECT_TIMEOUT
            value: "30"
        startupProbe:
          tcpSocket:
            port: 29418
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 60
        livenessProbe:
          tcpSocket:
            port: 29418
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 5
      - name: cgit
        image: ghcr.io/haiku/cgit:1.2.3-7
        env:
          - name: CGIT_TITLE
            value: "Haiku's repositories"
          - name: CGIT_DESC
            value: "Presented by cgit on kubernetes"
          - name: CGIT_VROOT
            value: "/"
          - name: CGIT_SECTION_FROM_STARTPATH
            value: "1"
        volumeMounts:
        - name: gerrit-data
          mountPath: /var/git
      volumes:
      - name: gerrit-data
        persistentVolumeClaim:
          claimName: gerrit-data-pvc
      - name: irccat-password
        secret:
          secretName: irccat-password
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: gerrit-pvbackup
spec:
  schedule: "0 1 * * 1,4"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          # volumes are attached to a single physical node (RWO), this ensures the backup
          # job always starts on the same physical node where gerrit is running
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - git
                topologyKey: kubernetes.io/hostname
          containers:
            - name: pvbackup
              image: ghcr.io/haiku/pvbackup:1.3
              args: ["backup", "gerrit-data"]
              env:
              - name: S3_HOST
                value: "https://s3.eu-west-1.wasabisys.com"
              - name: S3_BUCKET
                value: haiku-backups
              - name: S3_MAX_AGE
                value: 30d
              - name: S3_KEY
                valueFrom:
                  secretKeyRef:
                    name: s3-backup
                    key: s3_key
              - name: S3_SECRET
                valueFrom:
                  secretKeyRef:
                    name: s3-backup
                    key: s3_secret
              - name: TWOSECRET
                valueFrom:
                  secretKeyRef:
                    name: s3-backup
                    key: twosecret
              volumeMounts:
              - name: gerrit-data
                mountPath: /pvs/gerrit-data
          volumes:
          - name: gerrit-data
            persistentVolumeClaim:
              claimName: gerrit-data-pvc
          restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: gerrit-github-sync
spec:
  schedule: "0 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          # volumes are attached to a single physical node (RWO), this ensures the backup
          # job always starts on the same physical node where gerrit is running
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - git
                topologyKey: kubernetes.io/hostname
          containers:
            - name: gitsync
              image: ghcr.io/haiku/gitsync:1.2
              env:
              - name: GIT_ORG
                value: "haiku"
              - name: GIT_SERVER
                value: "github.com"
              - name: GIT_PREFIX
                value: "/data/git"
              - name: GIT_REPOS
                value: "haiku.git buildtools.git userguide.git"
              - name: SSH_IDENTITY
                value: "/run/secrets/ssh/private"
              volumeMounts:
              - name: gerrit-data
                mountPath: /data
              - name: github-bot-secret
                mountPath: /run/secrets/ssh
          volumes:
          - name: gerrit-data
            persistentVolumeClaim:
              claimName: gerrit-data-pvc
          - name: github-bot-secret
            secret:
              secretName: github-bot
              defaultMode: 0400
          restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: gerrit-codeberg-sync
spec:
  schedule: "30 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          # volumes are attached to a single physical node (RWO), this ensures the backup
          # job always starts on the same physical node where gerrit is running
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - git
                topologyKey: kubernetes.io/hostname
          containers:
            - name: gitsync
              image: ghcr.io/haiku/gitsync:1.2
              env:
              - name: GIT_ORG
                value: "haiku"
              - name: GIT_SERVER
                value: "codeberg.org"
              - name: GIT_PREFIX
                value: "/data/git"
              - name: GIT_REPOS
                value: "haiku.git buildtools.git userguide.git"
              - name: SSH_IDENTITY
                value: "/run/secrets/ssh/private"
              volumeMounts:
              - name: gerrit-data
                mountPath: /data
              - name: codeberg-bot-secret
                mountPath: /run/secrets/ssh
          volumes:
          - name: gerrit-data
            persistentVolumeClaim:
              claimName: gerrit-data-pvc
          - name: codeberg-bot-secret
            secret:
              secretName: codeberg-bot
              defaultMode: 0400
          restartPolicy: Never
#---
## Without RWX storage, we can't do rolling updates
#apiVersion: policy/v1
#kind: PodDisruptionBudget
#metadata:
#  name: git-pdb
#spec:
#  minAvailable: 0
#  selector:
#    matchLabels:
#      app: git
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gerrit-data-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: cgit
spec:
  selector:
    app: git
  ports:
  - name: web
    port: 80
    targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: review
spec:
  selector:
    app: git
  ports:
  - name: web
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: git-ssh
spec:
  selector:
    app: git
  ports:
  - name: ssh
    port: 22
    targetPort: 29418
---
apiVersion: traefik.io/v1alpha1
kind: MiddlewareTCP
metadata:
  name: git-ingressmiddle
spec:
  inFlightConn:
    amount: 10
---
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: git-ingresstcp
spec:
  entryPoints:
    - ssh
  routes:
  - match: HostSNI(`*`)
    services:
    - name: git-ssh
      port: 22
      weight: 10
      terminationDelay: 900000
#     unsupported by Gerrit
#     proxyProtocol:
#       version: 1
    middlewares:
    - name: git-ingressmiddle
---
# web frontends for cgit and gerrit
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: git-web
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    traefik.ingress.kubernetes.io/router.entrypoints: web,webs
    traefik.ingress.kubernetes.io/router.middlewares: default-errorku@kubernetescrd
    traefik.ingress.kubernetes.io/router.middlewares: default-cloud-denyip@kubernetescrd
spec:
  tls:
  - hosts:
    - git.haiku-os.org
    - cgit.haiku-os.org
    - review.haiku-os.org
    secretName: tls-cert-gerrit
  rules:
  - host: git.haiku-os.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cgit
            port:
              name: web
  - host: cgit.haiku-os.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cgit
            port:
              name: web
  - host: review.haiku-os.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: review
            port:
              name: web
