#!/bin/bash

export THREADS="${THREADS:-2}"
export BRANCH="${BRANCH:-master}"
export BUILD_TOP=/toolchains
export SRC_TOP=$BUILD_TOP/src
export ARTIFACT_TOP="$BUILD_TOP/artifacts"
export FORCE_BUILD="${FORCE_BUILD:-false}"
export TARGET_REPO="${TARGET_REPO:-ghcr.io}"
export TARGET_CONTAINER="${TARGET_CONTAINER:-${TARGET_REPO}/haiku/toolchain-worker-beta-${BRANCH}}"

buildah login -u $CONTAINER_REGISTRY_USERNAME -p $CONTAINER_REGISTRY_PASSWORD $TARGET_REPO
skopeo login -u $CONTAINER_REGISTRY_USERNAME -p $CONTAINER_REGISTRY_PASSWORD $TARGET_REPO

# Structured logging
exec 100>&1 200>&2
log() {
    if [ "$1" = - ]; then
        jq -Rsc '{"@timestamp": now|strftime("%Y-%m-%dT%H:%M:%S%z"), "branch": $BRANCH,
			"message":.}' 1>&100 2>&200
    else
        jq --arg m "$*" -nc '{"@timestamp": now|strftime("%Y-%m-%dT%H:%M:%S%z"), "branch": $BRANCH,
			"message":$m}' 1>&100 2>&200
    fi
}
coproc JSON_LOGGER { jq --unbuffered -Rc \
      '{"@timestamp": now|strftime("%Y-%m-%dT%H:%M:%S%z"),
        "message":.}' 1>&100 2>&200; }
exec 1>&${JSON_LOGGER[1]} 2>&${JSON_LOGGER[1]}


echo "Starting toolchain build of Haiku ${BRANCH} on ${THREADS} cpu cores..."

mkdir -p $BUILD_TOP
mkdir -p $SRC_TOP
mkdir -p $ARTIFACT_TOP

cd $BUILD_TOP

# Grab source code
git -C $SRC_TOP clone https://review.haiku-os.org/buildtools
git -C $SRC_TOP/buildtools checkout --track origin/$BRANCH
git -C $SRC_TOP/buildtools pull --tags
git -C $SRC_TOP clone https://review.haiku-os.org/haiku
git -C $SRC_TOP/haiku checkout --track origin/$BRANCH
git -C $SRC_TOP/haiku pull --tags

export HAIKU_SHA=$(git -C $SRC_TOP/buildtools rev-parse HEAD)
export BUILDTOOLS_SHA=$(git -C $SRC_TOP/buildtools rev-parse HEAD)

# Check if we already have it
if [[ "${FORCE_BUILD}" == "false" ]]; then
	echo "checking for remote containers"
	if [[ $(skopeo list-tags docker://${TARGET_CONTAINER} | jq -r .Tags | grep ${BUILDTOOLS_SHA} | wc -l) -gt 0 ]]; then
		echo "docker://${TARGET_CONTAINER}:${BUILDTOOLS_SHA} already exists in remote registry! Halting build. Use FORCE_BUILD=true to modify this check"
		exit 0
	fi
fi

# Build jam
echo "STEP: Building jam..."
cd $SRC_TOP/buildtools/jam
make -j$THREADS
mv bin.linuxx86/jam $ARTIFACT_TOP/jam
cd $BUILD_TOP

# Build toolchains
for arch in arm arm64 m68k riscv64 sparc x86 x86_64 x86_gcc2; do
	echo "STEP: Building $arch..."
	SCRIPT="${SRC_TOP}/haiku/build/scripts/build_cross_tools"
	MACHINE=""
	if [[ "$arch" != "x86_gcc2" ]]; then
		SCRIPT="${SCRIPT}_gcc4"
		MACHINE=$(${SRC_TOP}/haiku/build/scripts/find_triplet $arch)
	fi
	$SCRIPT $MACHINE $SRC_TOP/haiku $SRC_TOP/buildtools $BUILD_TOP/cross-tools-${arch} -j$THREADS
done

# Move resulting artifacts into build context
mv $BUILD_TOP/cross-tools-* $ARTIFACT_TOP

# Build container
echo "FROM ghcr.io/haiku/general-worker" > $BUILD_TOP/Dockerfile
echo "RUN mkdir -p /toolchains" >> $BUILD_TOP/Dockerfile
echo "ADD artifacts/jam /usr/bin/jam" >> $BUILD_TOP/Dockerfile
echo "ADD artifacts/cross-tools-* /toolchains/" >> $BUILD_TOP/Dockerfile
echo "Building ${BRANCH} toolchain container..."
buildah build \
	--annotation "org.opencontainers.image.created=$(date --rfc-3339 seconds),org.haiku.branch=$BRANCH,org.haiku.haiku-git=$HAIKU_SHA,org.haiku.buildtools-git=$BUILDTOOLS_SHA" \
	--tag $TARGET_CONTAINER:$BUILDTOOLS_SHA $BUILD_TOP
buildah tag $TARGET_CONTAINER:$BUILDTOOLS_SHA $TARGET_CONTAINER:latest

echo "Pushing $TARGET_CONTAINER:$BUILDTOOLS_SHA..."
buildah push $TARGET_CONTAINER:$BUILDTOOLS_SHA
echo "Pushing $TARGET_CONTAINER:latest..."
buildah push $TARGET_CONTAINER:latest
